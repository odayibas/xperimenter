/*
* generated by Xtext
*/
package tr.edu.metu.ceng.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XperimenterGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Type*;
		public ParserRule getRule() { return rule; }

		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExperimentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDesignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatAnalysisParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSimulationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	Experiment | Design | StatAnalysis | Simulation | Variable;
		public ParserRule getRule() { return rule; }

		//Experiment | Design | StatAnalysis | Simulation | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Experiment
		public RuleCall getExperimentParserRuleCall_0() { return cExperimentParserRuleCall_0; }

		//Design
		public RuleCall getDesignParserRuleCall_1() { return cDesignParserRuleCall_1; }

		//StatAnalysis
		public RuleCall getStatAnalysisParserRuleCall_2() { return cStatAnalysisParserRuleCall_2; }

		//Simulation
		public RuleCall getSimulationParserRuleCall_3() { return cSimulationParserRuleCall_3; }

		//Variable
		public RuleCall getVariableParserRuleCall_4() { return cVariableParserRuleCall_4; }
	}

	public class ExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Experiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cObjectiveKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjectiveAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectiveObjectiveEnumRuleCall_5_0 = (RuleCall)cObjectiveAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cDesignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDesignAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cDesignDesignCrossReference_8_0 = (CrossReference)cDesignAssignment_8.eContents().get(0);
		private final RuleCall cDesignDesignIDTerminalRuleCall_8_0_1 = (RuleCall)cDesignDesignCrossReference_8_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSimulationKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cSimulationAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cSimulationSimulationCrossReference_11_0 = (CrossReference)cSimulationAssignment_11.eContents().get(0);
		private final RuleCall cSimulationSimulationIDTerminalRuleCall_11_0_1 = (RuleCall)cSimulationSimulationCrossReference_11_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cAnalysisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cAnalysisAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cAnalysisStatAnalysisCrossReference_14_0 = (CrossReference)cAnalysisAssignment_14.eContents().get(0);
		private final RuleCall cAnalysisStatAnalysisIDTerminalRuleCall_14_0_1 = (RuleCall)cAnalysisStatAnalysisCrossReference_14_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cVisualKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cVisualizationAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cVisualizationVisualizationTypeEnumRuleCall_17_0 = (RuleCall)cVisualizationAssignment_17.eContents().get(0);
		private final Keyword cSemicolonKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cTimeoutKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Assignment cTimeoutAssignment_19_1 = (Assignment)cGroup_19.eContents().get(1);
		private final RuleCall cTimeoutINTTerminalRuleCall_19_1_0 = (RuleCall)cTimeoutAssignment_19_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_19_2 = (Keyword)cGroup_19.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//Experiment:
		//	"experiment" name=ID "{" ("desc" description=STRING ";")? "objective" objective=Objective ";" "design"
		//	design=[Design] ";" "simulation" simulation=[Simulation] ";" "analysis" analysis=[StatAnalysis] ";" "visual"
		//	visualization=VisualizationType ";" ("timeout" timeout=INT ";")? "}";
		public ParserRule getRule() { return rule; }

		//"experiment" name=ID "{" ("desc" description=STRING ";")? "objective" objective=Objective ";" "design" design=[Design]
		//";" "simulation" simulation=[Simulation] ";" "analysis" analysis=[StatAnalysis] ";" "visual"
		//visualization=VisualizationType ";" ("timeout" timeout=INT ";")? "}"
		public Group getGroup() { return cGroup; }

		//"experiment"
		public Keyword getExperimentKeyword_0() { return cExperimentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("desc" description=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"desc"
		public Keyword getDescKeyword_3_0() { return cDescKeyword_3_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//"objective"
		public Keyword getObjectiveKeyword_4() { return cObjectiveKeyword_4; }

		//objective=Objective
		public Assignment getObjectiveAssignment_5() { return cObjectiveAssignment_5; }

		//Objective
		public RuleCall getObjectiveObjectiveEnumRuleCall_5_0() { return cObjectiveObjectiveEnumRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//"design"
		public Keyword getDesignKeyword_7() { return cDesignKeyword_7; }

		//design=[Design]
		public Assignment getDesignAssignment_8() { return cDesignAssignment_8; }

		//[Design]
		public CrossReference getDesignDesignCrossReference_8_0() { return cDesignDesignCrossReference_8_0; }

		//ID
		public RuleCall getDesignDesignIDTerminalRuleCall_8_0_1() { return cDesignDesignIDTerminalRuleCall_8_0_1; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//"simulation"
		public Keyword getSimulationKeyword_10() { return cSimulationKeyword_10; }

		//simulation=[Simulation]
		public Assignment getSimulationAssignment_11() { return cSimulationAssignment_11; }

		//[Simulation]
		public CrossReference getSimulationSimulationCrossReference_11_0() { return cSimulationSimulationCrossReference_11_0; }

		//ID
		public RuleCall getSimulationSimulationIDTerminalRuleCall_11_0_1() { return cSimulationSimulationIDTerminalRuleCall_11_0_1; }

		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }

		//"analysis"
		public Keyword getAnalysisKeyword_13() { return cAnalysisKeyword_13; }

		//analysis=[StatAnalysis]
		public Assignment getAnalysisAssignment_14() { return cAnalysisAssignment_14; }

		//[StatAnalysis]
		public CrossReference getAnalysisStatAnalysisCrossReference_14_0() { return cAnalysisStatAnalysisCrossReference_14_0; }

		//ID
		public RuleCall getAnalysisStatAnalysisIDTerminalRuleCall_14_0_1() { return cAnalysisStatAnalysisIDTerminalRuleCall_14_0_1; }

		//";"
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }

		//"visual"
		public Keyword getVisualKeyword_16() { return cVisualKeyword_16; }

		//visualization=VisualizationType
		public Assignment getVisualizationAssignment_17() { return cVisualizationAssignment_17; }

		//VisualizationType
		public RuleCall getVisualizationVisualizationTypeEnumRuleCall_17_0() { return cVisualizationVisualizationTypeEnumRuleCall_17_0; }

		//";"
		public Keyword getSemicolonKeyword_18() { return cSemicolonKeyword_18; }

		//("timeout" timeout=INT ";")?
		public Group getGroup_19() { return cGroup_19; }

		//"timeout"
		public Keyword getTimeoutKeyword_19_0() { return cTimeoutKeyword_19_0; }

		//timeout=INT
		public Assignment getTimeoutAssignment_19_1() { return cTimeoutAssignment_19_1; }

		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_19_1_0() { return cTimeoutINTTerminalRuleCall_19_1_0; }

		//";"
		public Keyword getSemicolonKeyword_19_2() { return cSemicolonKeyword_19_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }
	}

	public class DesignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Design");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMethodKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodSamplingMethodEnumRuleCall_4_0 = (RuleCall)cMethodAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cVarlistKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVariablesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cVariablesVariableCrossReference_7_0 = (CrossReference)cVariablesAssignment_7.eContents().get(0);
		private final RuleCall cVariablesVariableIDTerminalRuleCall_7_0_1 = (RuleCall)cVariablesVariableCrossReference_7_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Design:
		//	"design" name=ID "{" "method" method=SamplingMethod ";" "varlist" variables+=[Variable]* ";" "}";
		public ParserRule getRule() { return rule; }

		//"design" name=ID "{" "method" method=SamplingMethod ";" "varlist" variables+=[Variable]* ";" "}"
		public Group getGroup() { return cGroup; }

		//"design"
		public Keyword getDesignKeyword_0() { return cDesignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"method"
		public Keyword getMethodKeyword_3() { return cMethodKeyword_3; }

		//method=SamplingMethod
		public Assignment getMethodAssignment_4() { return cMethodAssignment_4; }

		//SamplingMethod
		public RuleCall getMethodSamplingMethodEnumRuleCall_4_0() { return cMethodSamplingMethodEnumRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"varlist"
		public Keyword getVarlistKeyword_6() { return cVarlistKeyword_6; }

		//variables+=[Variable]*
		public Assignment getVariablesAssignment_7() { return cVariablesAssignment_7; }

		//[Variable]
		public CrossReference getVariablesVariableCrossReference_7_0() { return cVariablesVariableCrossReference_7_0; }

		//ID
		public RuleCall getVariablesVariableIDTerminalRuleCall_7_0_1() { return cVariablesVariableIDTerminalRuleCall_7_0_1; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class SimulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Simulation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cModelFileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelFilePathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelFilePathSTRINGTerminalRuleCall_4_0 = (RuleCall)cModelFilePathAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cModelTypeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cModelTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cModelTypeSimModelTypeEnumRuleCall_6_1_0 = (RuleCall)cModelTypeAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cPortsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPortsPortParserRuleCall_7_0 = (RuleCall)cPortsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Simulation:
		//	"simulation" name=ID "{" "modelFile" modelFilePath=STRING ";" ("modelType" modelType=SimModelType ";") ports+=Port*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"simulation" name=ID "{" "modelFile" modelFilePath=STRING ";" ("modelType" modelType=SimModelType ";") ports+=Port* "}"
		public Group getGroup() { return cGroup; }

		//"simulation"
		public Keyword getSimulationKeyword_0() { return cSimulationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"modelFile"
		public Keyword getModelFileKeyword_3() { return cModelFileKeyword_3; }

		//modelFilePath=STRING
		public Assignment getModelFilePathAssignment_4() { return cModelFilePathAssignment_4; }

		//STRING
		public RuleCall getModelFilePathSTRINGTerminalRuleCall_4_0() { return cModelFilePathSTRINGTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"modelType" modelType=SimModelType ";"
		public Group getGroup_6() { return cGroup_6; }

		//"modelType"
		public Keyword getModelTypeKeyword_6_0() { return cModelTypeKeyword_6_0; }

		//modelType=SimModelType
		public Assignment getModelTypeAssignment_6_1() { return cModelTypeAssignment_6_1; }

		//SimModelType
		public RuleCall getModelTypeSimModelTypeEnumRuleCall_6_1_0() { return cModelTypeSimModelTypeEnumRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }

		//ports+=Port*
		public Assignment getPortsAssignment_7() { return cPortsAssignment_7; }

		//Port
		public RuleCall getPortsPortParserRuleCall_7_0() { return cPortsPortParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class StatAnalysisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatAnalysis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatAnalysisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cServiceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUriAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUriSTRINGTerminalRuleCall_4_0 = (RuleCall)cUriAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StatAnalysis:
		//	"statAnalysis" name=ID "{" "service" uri=STRING ";" "}";
		public ParserRule getRule() { return rule; }

		//"statAnalysis" name=ID "{" "service" uri=STRING ";" "}"
		public Group getGroup() { return cGroup; }

		//"statAnalysis"
		public Keyword getStatAnalysisKeyword_0() { return cStatAnalysisKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"service"
		public Keyword getServiceKeyword_3() { return cServiceKeyword_3; }

		//uri=STRING
		public Assignment getUriAssignment_4() { return cUriAssignment_4; }

		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_4_0() { return cUriSTRINGTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Port:
		//	InPort | OutPort;
		public ParserRule getRule() { return rule; }

		//InPort | OutPort
		public Alternatives getAlternatives() { return cAlternatives; }

		//InPort
		public RuleCall getInPortParserRuleCall_0() { return cInPortParserRuleCall_0; }

		//OutPort
		public RuleCall getOutPortParserRuleCall_1() { return cOutPortParserRuleCall_1; }
	}

	public class InPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableVariableCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVariableVariableCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InPort:
		//	"inport" name=ID ":" variable=[Variable] ";";
		public ParserRule getRule() { return rule; }

		//"inport" name=ID ":" variable=[Variable] ";"
		public Group getGroup() { return cGroup; }

		//"inport"
		public Keyword getInportKeyword_0() { return cInportKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//variable=[Variable]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//[Variable]
		public CrossReference getVariableVariableCrossReference_3_0() { return cVariableVariableCrossReference_3_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_0_1() { return cVariableVariableIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class OutPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableVariableCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVariableVariableCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OutPort:
		//	"outport" name=ID ":" variable=[Variable] ";";
		public ParserRule getRule() { return rule; }

		//"outport" name=ID ":" variable=[Variable] ";"
		public Group getGroup() { return cGroup; }

		//"outport"
		public Keyword getOutportKeyword_0() { return cOutportKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//variable=[Variable]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//[Variable]
		public CrossReference getVariableVariableCrossReference_3_0() { return cVariableVariableCrossReference_3_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_0_1() { return cVariableVariableIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeVariableTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cGroupKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGroupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupVariableGroupEnumRuleCall_5_0 = (RuleCall)cGroupAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLowValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLowValueINTTerminalRuleCall_6_1_0 = (RuleCall)cLowValueAssignment_6_1.eContents().get(0);
		private final Keyword cCommaKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cHighValueAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cHighValueINTTerminalRuleCall_6_3_0 = (RuleCall)cHighValueAssignment_6_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGenKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGeneratorAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cGeneratorNumberGeneratorCrossReference_7_1_0 = (CrossReference)cGeneratorAssignment_7_1.eContents().get(0);
		private final RuleCall cGeneratorNumberGeneratorIDTerminalRuleCall_7_1_0_1 = (RuleCall)cGeneratorNumberGeneratorCrossReference_7_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Variable:
		//	"variable" name=ID ":" type=VariableType "group" group=VariableGroup ("[" lowValue=INT "," highValue=INT "]")? ("gen"
		//	generator=[NumberGenerator])? ";";
		public ParserRule getRule() { return rule; }

		//"variable" name=ID ":" type=VariableType "group" group=VariableGroup ("[" lowValue=INT "," highValue=INT "]")? ("gen"
		//generator=[NumberGenerator])? ";"
		public Group getGroup() { return cGroup; }

		//"variable"
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=VariableType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_3_0() { return cTypeVariableTypeEnumRuleCall_3_0; }

		//"group"
		public Keyword getGroupKeyword_4() { return cGroupKeyword_4; }

		//group=VariableGroup
		public Assignment getGroupAssignment_5() { return cGroupAssignment_5; }

		//VariableGroup
		public RuleCall getGroupVariableGroupEnumRuleCall_5_0() { return cGroupVariableGroupEnumRuleCall_5_0; }

		//("[" lowValue=INT "," highValue=INT "]")?
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//lowValue=INT
		public Assignment getLowValueAssignment_6_1() { return cLowValueAssignment_6_1; }

		//INT
		public RuleCall getLowValueINTTerminalRuleCall_6_1_0() { return cLowValueINTTerminalRuleCall_6_1_0; }

		//","
		public Keyword getCommaKeyword_6_2() { return cCommaKeyword_6_2; }

		//highValue=INT
		public Assignment getHighValueAssignment_6_3() { return cHighValueAssignment_6_3; }

		//INT
		public RuleCall getHighValueINTTerminalRuleCall_6_3_0() { return cHighValueINTTerminalRuleCall_6_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_4() { return cRightSquareBracketKeyword_6_4; }

		//("gen" generator=[NumberGenerator])?
		public Group getGroup_7() { return cGroup_7; }

		//"gen"
		public Keyword getGenKeyword_7_0() { return cGenKeyword_7_0; }

		//generator=[NumberGenerator]
		public Assignment getGeneratorAssignment_7_1() { return cGeneratorAssignment_7_1; }

		//[NumberGenerator]
		public CrossReference getGeneratorNumberGeneratorCrossReference_7_1_0() { return cGeneratorNumberGeneratorCrossReference_7_1_0; }

		//ID
		public RuleCall getGeneratorNumberGeneratorIDTerminalRuleCall_7_1_0_1() { return cGeneratorNumberGeneratorIDTerminalRuleCall_7_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class NumberGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberGenerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cServiceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUriAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUriSTRINGTerminalRuleCall_4_0 = (RuleCall)cUriAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSeedKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSeedAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSeedINTTerminalRuleCall_6_1_0 = (RuleCall)cSeedAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NumberGenerator:
		//	"generator" name=ID "{" "service" uri=STRING ";" ("seed" seed=INT ";")? "}";
		public ParserRule getRule() { return rule; }

		//"generator" name=ID "{" "service" uri=STRING ";" ("seed" seed=INT ";")? "}"
		public Group getGroup() { return cGroup; }

		//"generator"
		public Keyword getGeneratorKeyword_0() { return cGeneratorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"service"
		public Keyword getServiceKeyword_3() { return cServiceKeyword_3; }

		//uri=STRING
		public Assignment getUriAssignment_4() { return cUriAssignment_4; }

		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_4_0() { return cUriSTRINGTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//("seed" seed=INT ";")?
		public Group getGroup_6() { return cGroup_6; }

		//"seed"
		public Keyword getSeedKeyword_6_0() { return cSeedKeyword_6_0; }

		//seed=INT
		public Assignment getSeedAssignment_6_1() { return cSeedAssignment_6_1; }

		//INT
		public RuleCall getSeedINTTerminalRuleCall_6_1_0() { return cSeedINTTerminalRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	
	public class ObjectiveElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Objective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOMPARATIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOMPARATIVECOMPARATIVEKeyword_0_0 = (Keyword)cCOMPARATIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSCREENINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSCREENINGSCREENINGKeyword_1_0 = (Keyword)cSCREENINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRESPSURFACEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRESPSURFACERESPSURFACEKeyword_2_0 = (Keyword)cRESPSURFACEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Objective:
		//	COMPARATIVE | SCREENING | RESPSURFACE;
		public EnumRule getRule() { return rule; }

		//COMPARATIVE | SCREENING | RESPSURFACE
		public Alternatives getAlternatives() { return cAlternatives; }

		//COMPARATIVE
		public EnumLiteralDeclaration getCOMPARATIVEEnumLiteralDeclaration_0() { return cCOMPARATIVEEnumLiteralDeclaration_0; }

		//"COMPARATIVE"
		public Keyword getCOMPARATIVECOMPARATIVEKeyword_0_0() { return cCOMPARATIVECOMPARATIVEKeyword_0_0; }

		//SCREENING
		public EnumLiteralDeclaration getSCREENINGEnumLiteralDeclaration_1() { return cSCREENINGEnumLiteralDeclaration_1; }

		//"SCREENING"
		public Keyword getSCREENINGSCREENINGKeyword_1_0() { return cSCREENINGSCREENINGKeyword_1_0; }

		//RESPSURFACE
		public EnumLiteralDeclaration getRESPSURFACEEnumLiteralDeclaration_2() { return cRESPSURFACEEnumLiteralDeclaration_2; }

		//"RESPSURFACE"
		public Keyword getRESPSURFACERESPSURFACEKeyword_2_0() { return cRESPSURFACERESPSURFACEKeyword_2_0; }
	}

	public class SimModelTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SimModelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTATICSTATICKeyword_0_0 = (Keyword)cSTATICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONTINUOUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONTINUOUSCONTINUOUSKeyword_1_0 = (Keyword)cCONTINUOUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDISCRETEEVENTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDISCRETEEVENTDISCRETEEVENTKeyword_2_0 = (Keyword)cDISCRETEEVENTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SimModelType:
		//	STATIC | CONTINUOUS | DISCRETEEVENT;
		public EnumRule getRule() { return rule; }

		//STATIC | CONTINUOUS | DISCRETEEVENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//STATIC
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_0() { return cSTATICEnumLiteralDeclaration_0; }

		//"STATIC"
		public Keyword getSTATICSTATICKeyword_0_0() { return cSTATICSTATICKeyword_0_0; }

		//CONTINUOUS
		public EnumLiteralDeclaration getCONTINUOUSEnumLiteralDeclaration_1() { return cCONTINUOUSEnumLiteralDeclaration_1; }

		//"CONTINUOUS"
		public Keyword getCONTINUOUSCONTINUOUSKeyword_1_0() { return cCONTINUOUSCONTINUOUSKeyword_1_0; }

		//DISCRETEEVENT
		public EnumLiteralDeclaration getDISCRETEEVENTEnumLiteralDeclaration_2() { return cDISCRETEEVENTEnumLiteralDeclaration_2; }

		//"DISCRETEEVENT"
		public Keyword getDISCRETEEVENTDISCRETEEVENTKeyword_2_0() { return cDISCRETEEVENTDISCRETEEVENTKeyword_2_0; }
	}

	public class VariableGroupElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VariableGroup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFACTOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFACTORFACTORKeyword_0_0 = (Keyword)cFACTOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRESPONSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRESPONSERESPONSEKeyword_1_0 = (Keyword)cRESPONSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum VariableGroup:
		//	FACTOR | RESPONSE;
		public EnumRule getRule() { return rule; }

		//FACTOR | RESPONSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//FACTOR
		public EnumLiteralDeclaration getFACTOREnumLiteralDeclaration_0() { return cFACTOREnumLiteralDeclaration_0; }

		//"FACTOR"
		public Keyword getFACTORFACTORKeyword_0_0() { return cFACTORFACTORKeyword_0_0; }

		//RESPONSE
		public EnumLiteralDeclaration getRESPONSEEnumLiteralDeclaration_1() { return cRESPONSEEnumLiteralDeclaration_1; }

		//"RESPONSE"
		public Keyword getRESPONSERESPONSEKeyword_1_0() { return cRESPONSERESPONSEKeyword_1_0; }
	}

	public class VariableTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLEANBOOLEANKeyword_0_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERINTEGERKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLOATFLOATKeyword_2_0 = (Keyword)cFLOATEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTRINGSTRINGKeyword_3_0 = (Keyword)cSTRINGEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VariableType:
		//	BOOLEAN | INTEGER | FLOAT | STRING;
		public EnumRule getRule() { return rule; }

		//BOOLEAN | INTEGER | FLOAT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_0() { return cBOOLEANEnumLiteralDeclaration_0; }

		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_0_0() { return cBOOLEANBOOLEANKeyword_0_0; }

		//INTEGER
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }

		//"INTEGER"
		public Keyword getINTEGERINTEGERKeyword_1_0() { return cINTEGERINTEGERKeyword_1_0; }

		//FLOAT
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_2() { return cFLOATEnumLiteralDeclaration_2; }

		//"FLOAT"
		public Keyword getFLOATFLOATKeyword_2_0() { return cFLOATFLOATKeyword_2_0; }

		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_3() { return cSTRINGEnumLiteralDeclaration_3; }

		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_3_0() { return cSTRINGSTRINGKeyword_3_0; }
	}

	public class SamplingMethodElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SamplingMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRANDOMIZEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRANDOMIZEDRANDOMIZEDKeyword_0_0 = (Keyword)cRANDOMIZEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRANDOMIZEDBLOCKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRANDOMIZEDBLOCKRANDOMIZEDBLOCKKeyword_1_0 = (Keyword)cRANDOMIZEDBLOCKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFACTORIALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFACTORIALFACTORIALKeyword_2_0 = (Keyword)cFACTORIALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFRACFACTORIALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFRACFACTORIALFRACFACTORIALKeyword_3_0 = (Keyword)cFRACFACTORIALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCENTRALCOMPEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCENTRALCOMPCENTRALCOMPKeyword_4_0 = (Keyword)cCENTRALCOMPEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SamplingMethod:
		//	RANDOMIZED | RANDOMIZEDBLOCK | FACTORIAL | FRACFACTORIAL | CENTRALCOMP;
		public EnumRule getRule() { return rule; }

		//RANDOMIZED | RANDOMIZEDBLOCK | FACTORIAL | FRACFACTORIAL | CENTRALCOMP
		public Alternatives getAlternatives() { return cAlternatives; }

		//RANDOMIZED
		public EnumLiteralDeclaration getRANDOMIZEDEnumLiteralDeclaration_0() { return cRANDOMIZEDEnumLiteralDeclaration_0; }

		//"RANDOMIZED"
		public Keyword getRANDOMIZEDRANDOMIZEDKeyword_0_0() { return cRANDOMIZEDRANDOMIZEDKeyword_0_0; }

		//RANDOMIZEDBLOCK
		public EnumLiteralDeclaration getRANDOMIZEDBLOCKEnumLiteralDeclaration_1() { return cRANDOMIZEDBLOCKEnumLiteralDeclaration_1; }

		//"RANDOMIZEDBLOCK"
		public Keyword getRANDOMIZEDBLOCKRANDOMIZEDBLOCKKeyword_1_0() { return cRANDOMIZEDBLOCKRANDOMIZEDBLOCKKeyword_1_0; }

		//FACTORIAL
		public EnumLiteralDeclaration getFACTORIALEnumLiteralDeclaration_2() { return cFACTORIALEnumLiteralDeclaration_2; }

		//"FACTORIAL"
		public Keyword getFACTORIALFACTORIALKeyword_2_0() { return cFACTORIALFACTORIALKeyword_2_0; }

		//FRACFACTORIAL
		public EnumLiteralDeclaration getFRACFACTORIALEnumLiteralDeclaration_3() { return cFRACFACTORIALEnumLiteralDeclaration_3; }

		//"FRACFACTORIAL"
		public Keyword getFRACFACTORIALFRACFACTORIALKeyword_3_0() { return cFRACFACTORIALFRACFACTORIALKeyword_3_0; }

		//CENTRALCOMP
		public EnumLiteralDeclaration getCENTRALCOMPEnumLiteralDeclaration_4() { return cCENTRALCOMPEnumLiteralDeclaration_4; }

		//"CENTRALCOMP"
		public Keyword getCENTRALCOMPCENTRALCOMPKeyword_4_0() { return cCENTRALCOMPCENTRALCOMPKeyword_4_0; }
	}

	public class StatAnalysisTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StatAnalysisType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHYPOTESTINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHYPOTESTINGHYPOTESTINGKeyword_0_0 = (Keyword)cHYPOTESTINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANOVAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANOVAANOVAKeyword_1_0 = (Keyword)cANOVAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMANOVAEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMANOVAMANOVAKeyword_2_0 = (Keyword)cMANOVAEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCONFINTERVALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCONFINTERVALCONFINTERVALKeyword_3_0 = (Keyword)cCONFINTERVALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum StatAnalysisType:
		//	HYPOTESTING | ANOVA | MANOVA | CONFINTERVAL;
		public EnumRule getRule() { return rule; }

		//HYPOTESTING | ANOVA | MANOVA | CONFINTERVAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//HYPOTESTING
		public EnumLiteralDeclaration getHYPOTESTINGEnumLiteralDeclaration_0() { return cHYPOTESTINGEnumLiteralDeclaration_0; }

		//"HYPOTESTING"
		public Keyword getHYPOTESTINGHYPOTESTINGKeyword_0_0() { return cHYPOTESTINGHYPOTESTINGKeyword_0_0; }

		//ANOVA
		public EnumLiteralDeclaration getANOVAEnumLiteralDeclaration_1() { return cANOVAEnumLiteralDeclaration_1; }

		//"ANOVA"
		public Keyword getANOVAANOVAKeyword_1_0() { return cANOVAANOVAKeyword_1_0; }

		//MANOVA
		public EnumLiteralDeclaration getMANOVAEnumLiteralDeclaration_2() { return cMANOVAEnumLiteralDeclaration_2; }

		//"MANOVA"
		public Keyword getMANOVAMANOVAKeyword_2_0() { return cMANOVAMANOVAKeyword_2_0; }

		//CONFINTERVAL
		public EnumLiteralDeclaration getCONFINTERVALEnumLiteralDeclaration_3() { return cCONFINTERVALEnumLiteralDeclaration_3; }

		//"CONFINTERVAL"
		public Keyword getCONFINTERVALCONFINTERVALKeyword_3_0() { return cCONFINTERVALCONFINTERVALKeyword_3_0; }
	}

	public class VisualizationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VisualizationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHISTOGRAMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHISTOGRAMHISTOGRAMKeyword_0_0 = (Keyword)cHISTOGRAMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSCATTERPLOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSCATTERPLOTSCATTERPLOTKeyword_1_0 = (Keyword)cSCATTERPLOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum VisualizationType:
		//	HISTOGRAM | SCATTERPLOT;
		public EnumRule getRule() { return rule; }

		//HISTOGRAM | SCATTERPLOT
		public Alternatives getAlternatives() { return cAlternatives; }

		//HISTOGRAM
		public EnumLiteralDeclaration getHISTOGRAMEnumLiteralDeclaration_0() { return cHISTOGRAMEnumLiteralDeclaration_0; }

		//"HISTOGRAM"
		public Keyword getHISTOGRAMHISTOGRAMKeyword_0_0() { return cHISTOGRAMHISTOGRAMKeyword_0_0; }

		//SCATTERPLOT
		public EnumLiteralDeclaration getSCATTERPLOTEnumLiteralDeclaration_1() { return cSCATTERPLOTEnumLiteralDeclaration_1; }

		//"SCATTERPLOT"
		public Keyword getSCATTERPLOTSCATTERPLOTKeyword_1_0() { return cSCATTERPLOTSCATTERPLOTKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private TypeElements pType;
	private ExperimentElements pExperiment;
	private DesignElements pDesign;
	private SimulationElements pSimulation;
	private StatAnalysisElements pStatAnalysis;
	private PortElements pPort;
	private InPortElements pInPort;
	private OutPortElements pOutPort;
	private VariableElements pVariable;
	private NumberGeneratorElements pNumberGenerator;
	private ObjectiveElements unknownRuleObjective;
	private SimModelTypeElements unknownRuleSimModelType;
	private VariableGroupElements unknownRuleVariableGroup;
	private VariableTypeElements unknownRuleVariableType;
	private SamplingMethodElements unknownRuleSamplingMethod;
	private StatAnalysisTypeElements unknownRuleStatAnalysisType;
	private VisualizationTypeElements unknownRuleVisualizationType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XperimenterGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tr.edu.metu.ceng.Xperimenter".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Type*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Type:
	//	Experiment | Design | StatAnalysis | Simulation | Variable;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Experiment:
	//	"experiment" name=ID "{" ("desc" description=STRING ";")? "objective" objective=Objective ";" "design"
	//	design=[Design] ";" "simulation" simulation=[Simulation] ";" "analysis" analysis=[StatAnalysis] ";" "visual"
	//	visualization=VisualizationType ";" ("timeout" timeout=INT ";")? "}";
	public ExperimentElements getExperimentAccess() {
		return (pExperiment != null) ? pExperiment : (pExperiment = new ExperimentElements());
	}
	
	public ParserRule getExperimentRule() {
		return getExperimentAccess().getRule();
	}

	//Design:
	//	"design" name=ID "{" "method" method=SamplingMethod ";" "varlist" variables+=[Variable]* ";" "}";
	public DesignElements getDesignAccess() {
		return (pDesign != null) ? pDesign : (pDesign = new DesignElements());
	}
	
	public ParserRule getDesignRule() {
		return getDesignAccess().getRule();
	}

	//Simulation:
	//	"simulation" name=ID "{" "modelFile" modelFilePath=STRING ";" ("modelType" modelType=SimModelType ";") ports+=Port*
	//	"}";
	public SimulationElements getSimulationAccess() {
		return (pSimulation != null) ? pSimulation : (pSimulation = new SimulationElements());
	}
	
	public ParserRule getSimulationRule() {
		return getSimulationAccess().getRule();
	}

	//StatAnalysis:
	//	"statAnalysis" name=ID "{" "service" uri=STRING ";" "}";
	public StatAnalysisElements getStatAnalysisAccess() {
		return (pStatAnalysis != null) ? pStatAnalysis : (pStatAnalysis = new StatAnalysisElements());
	}
	
	public ParserRule getStatAnalysisRule() {
		return getStatAnalysisAccess().getRule();
	}

	//Port:
	//	InPort | OutPort;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//InPort:
	//	"inport" name=ID ":" variable=[Variable] ";";
	public InPortElements getInPortAccess() {
		return (pInPort != null) ? pInPort : (pInPort = new InPortElements());
	}
	
	public ParserRule getInPortRule() {
		return getInPortAccess().getRule();
	}

	//OutPort:
	//	"outport" name=ID ":" variable=[Variable] ";";
	public OutPortElements getOutPortAccess() {
		return (pOutPort != null) ? pOutPort : (pOutPort = new OutPortElements());
	}
	
	public ParserRule getOutPortRule() {
		return getOutPortAccess().getRule();
	}

	//Variable:
	//	"variable" name=ID ":" type=VariableType "group" group=VariableGroup ("[" lowValue=INT "," highValue=INT "]")? ("gen"
	//	generator=[NumberGenerator])? ";";
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//NumberGenerator:
	//	"generator" name=ID "{" "service" uri=STRING ";" ("seed" seed=INT ";")? "}";
	public NumberGeneratorElements getNumberGeneratorAccess() {
		return (pNumberGenerator != null) ? pNumberGenerator : (pNumberGenerator = new NumberGeneratorElements());
	}
	
	public ParserRule getNumberGeneratorRule() {
		return getNumberGeneratorAccess().getRule();
	}

	//enum Objective:
	//	COMPARATIVE | SCREENING | RESPSURFACE;
	public ObjectiveElements getObjectiveAccess() {
		return (unknownRuleObjective != null) ? unknownRuleObjective : (unknownRuleObjective = new ObjectiveElements());
	}
	
	public EnumRule getObjectiveRule() {
		return getObjectiveAccess().getRule();
	}

	//enum SimModelType:
	//	STATIC | CONTINUOUS | DISCRETEEVENT;
	public SimModelTypeElements getSimModelTypeAccess() {
		return (unknownRuleSimModelType != null) ? unknownRuleSimModelType : (unknownRuleSimModelType = new SimModelTypeElements());
	}
	
	public EnumRule getSimModelTypeRule() {
		return getSimModelTypeAccess().getRule();
	}

	//enum VariableGroup:
	//	FACTOR | RESPONSE;
	public VariableGroupElements getVariableGroupAccess() {
		return (unknownRuleVariableGroup != null) ? unknownRuleVariableGroup : (unknownRuleVariableGroup = new VariableGroupElements());
	}
	
	public EnumRule getVariableGroupRule() {
		return getVariableGroupAccess().getRule();
	}

	//enum VariableType:
	//	BOOLEAN | INTEGER | FLOAT | STRING;
	public VariableTypeElements getVariableTypeAccess() {
		return (unknownRuleVariableType != null) ? unknownRuleVariableType : (unknownRuleVariableType = new VariableTypeElements());
	}
	
	public EnumRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}

	//enum SamplingMethod:
	//	RANDOMIZED | RANDOMIZEDBLOCK | FACTORIAL | FRACFACTORIAL | CENTRALCOMP;
	public SamplingMethodElements getSamplingMethodAccess() {
		return (unknownRuleSamplingMethod != null) ? unknownRuleSamplingMethod : (unknownRuleSamplingMethod = new SamplingMethodElements());
	}
	
	public EnumRule getSamplingMethodRule() {
		return getSamplingMethodAccess().getRule();
	}

	//enum StatAnalysisType:
	//	HYPOTESTING | ANOVA | MANOVA | CONFINTERVAL;
	public StatAnalysisTypeElements getStatAnalysisTypeAccess() {
		return (unknownRuleStatAnalysisType != null) ? unknownRuleStatAnalysisType : (unknownRuleStatAnalysisType = new StatAnalysisTypeElements());
	}
	
	public EnumRule getStatAnalysisTypeRule() {
		return getStatAnalysisTypeAccess().getRule();
	}

	//enum VisualizationType:
	//	HISTOGRAM | SCATTERPLOT;
	public VisualizationTypeElements getVisualizationTypeAccess() {
		return (unknownRuleVisualizationType != null) ? unknownRuleVisualizationType : (unknownRuleVisualizationType = new VisualizationTypeElements());
	}
	
	public EnumRule getVisualizationTypeRule() {
		return getVisualizationTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
