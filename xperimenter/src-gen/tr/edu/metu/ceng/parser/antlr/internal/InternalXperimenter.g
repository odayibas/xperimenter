/*
* generated by Xtext
*/
grammar InternalXperimenter;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package tr.edu.metu.ceng.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package tr.edu.metu.ceng.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import tr.edu.metu.ceng.services.XperimenterGrammarAccess;

}

@parser::members {

 	private XperimenterGrammarAccess grammarAccess;
 	
    public InternalXperimenterParser(TokenStream input, XperimenterGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected XperimenterGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsTypeParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getExperimentParserRuleCall_0()); 
    }
    this_Experiment_0=ruleExperiment
    { 
        $current = $this_Experiment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getDesignParserRuleCall_1()); 
    }
    this_Design_1=ruleDesign
    { 
        $current = $this_Design_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getStatAnalysisParserRuleCall_2()); 
    }
    this_StatAnalysis_2=ruleStatAnalysis
    { 
        $current = $this_StatAnalysis_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSimulationParserRuleCall_3()); 
    }
    this_Simulation_3=ruleSimulation
    { 
        $current = $this_Simulation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getVariableParserRuleCall_4()); 
    }
    this_Variable_4=ruleVariable
    { 
        $current = $this_Variable_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExperiment
entryRuleExperiment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExperimentRule()); }
	 iv_ruleExperiment=ruleExperiment 
	 { $current=$iv_ruleExperiment.current; } 
	 EOF 
;

// Rule Experiment
ruleExperiment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='experiment' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExperimentAccess().getExperimentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExperimentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExperimentAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='desc' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExperimentAccess().getDescKeyword_3_0());
    }
(
(
		lv_description_4_0=RULE_STRING
		{
			newLeafNode(lv_description_4_0, grammarAccess.getExperimentAccess().getDescriptionSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_4_0, 
        		"STRING");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExperimentAccess().getSemicolonKeyword_3_2());
    }
)?	otherlv_6='objective' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExperimentAccess().getObjectiveKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentAccess().getObjectiveObjectiveEnumRuleCall_5_0()); 
	    }
		lv_objective_7_0=ruleObjective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentRule());
	        }
       		set(
       			$current, 
       			"objective",
        		lv_objective_7_0, 
        		"Objective");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExperimentAccess().getSemicolonKeyword_6());
    }
	otherlv_9='design' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExperimentAccess().getDesignKeyword_7());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getExperimentAccess().getDesignDesignCrossReference_8_0()); 
	}

)
)	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getExperimentAccess().getSemicolonKeyword_9());
    }
	otherlv_12='simulation' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getExperimentAccess().getSimulationKeyword_10());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getExperimentAccess().getSimulationSimulationCrossReference_11_0()); 
	}

)
)	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getExperimentAccess().getSemicolonKeyword_12());
    }
	otherlv_15='analysis' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getExperimentAccess().getAnalysisKeyword_13());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentRule());
	        }
        }
	otherlv_16=RULE_ID
	{
		newLeafNode(otherlv_16, grammarAccess.getExperimentAccess().getAnalysisStatAnalysisCrossReference_14_0()); 
	}

)
)	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getExperimentAccess().getSemicolonKeyword_15());
    }
	otherlv_18='visual' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getExperimentAccess().getVisualKeyword_16());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentAccess().getVisualizationVisualizationTypeEnumRuleCall_17_0()); 
	    }
		lv_visualization_19_0=ruleVisualizationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentRule());
	        }
       		set(
       			$current, 
       			"visualization",
        		lv_visualization_19_0, 
        		"VisualizationType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_20=';' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getExperimentAccess().getSemicolonKeyword_18());
    }
(	otherlv_21='timeout' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getExperimentAccess().getTimeoutKeyword_19_0());
    }
(
(
		lv_timeout_22_0=RULE_INT
		{
			newLeafNode(lv_timeout_22_0, grammarAccess.getExperimentAccess().getTimeoutINTTerminalRuleCall_19_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeout",
        		lv_timeout_22_0, 
        		"INT");
	    }

)
)	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getExperimentAccess().getSemicolonKeyword_19_2());
    }
)?	otherlv_24='}' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getExperimentAccess().getRightCurlyBracketKeyword_20());
    }
)
;





// Entry rule entryRuleDesign
entryRuleDesign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDesignRule()); }
	 iv_ruleDesign=ruleDesign 
	 { $current=$iv_ruleDesign.current; } 
	 EOF 
;

// Rule Design
ruleDesign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='design' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDesignAccess().getDesignKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDesignAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDesignRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDesignAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='method' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDesignAccess().getMethodKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDesignAccess().getMethodSamplingMethodEnumRuleCall_4_0()); 
	    }
		lv_method_4_0=ruleSamplingMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDesignRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_4_0, 
        		"SamplingMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDesignAccess().getSemicolonKeyword_5());
    }
	otherlv_6='varlist' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDesignAccess().getVarlistKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDesignRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getDesignAccess().getVariablesVariableCrossReference_7_0()); 
	}

)
)*	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDesignAccess().getSemicolonKeyword_8());
    }
	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDesignAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleSimulation
entryRuleSimulation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimulationRule()); }
	 iv_ruleSimulation=ruleSimulation 
	 { $current=$iv_ruleSimulation.current; } 
	 EOF 
;

// Rule Simulation
ruleSimulation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='simulation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimulationAccess().getSimulationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSimulationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimulationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimulationAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='modelFile' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimulationAccess().getModelFileKeyword_3());
    }
(
(
		lv_modelFilePath_4_0=RULE_STRING
		{
			newLeafNode(lv_modelFilePath_4_0, grammarAccess.getSimulationAccess().getModelFilePathSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimulationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"modelFilePath",
        		lv_modelFilePath_4_0, 
        		"STRING");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimulationAccess().getSemicolonKeyword_5());
    }
(	otherlv_6='modelType' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimulationAccess().getModelTypeKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimulationAccess().getModelTypeSimModelTypeEnumRuleCall_6_1_0()); 
	    }
		lv_modelType_7_0=ruleSimModelType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimulationRule());
	        }
       		set(
       			$current, 
       			"modelType",
        		lv_modelType_7_0, 
        		"SimModelType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimulationAccess().getSemicolonKeyword_6_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimulationAccess().getPortsPortParserRuleCall_7_0()); 
	    }
		lv_ports_9_0=rulePort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimulationRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_9_0, 
        		"Port");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimulationAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleStatAnalysis
entryRuleStatAnalysis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatAnalysisRule()); }
	 iv_ruleStatAnalysis=ruleStatAnalysis 
	 { $current=$iv_ruleStatAnalysis.current; } 
	 EOF 
;

// Rule StatAnalysis
ruleStatAnalysis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='statAnalysis' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatAnalysisAccess().getStatAnalysisKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStatAnalysisAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatAnalysisRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatAnalysisAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='service' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatAnalysisAccess().getServiceKeyword_3());
    }
(
(
		lv_uri_4_0=RULE_STRING
		{
			newLeafNode(lv_uri_4_0, grammarAccess.getStatAnalysisAccess().getUriSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatAnalysisRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"uri",
        		lv_uri_4_0, 
        		"STRING");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatAnalysisAccess().getSemicolonKeyword_5());
    }
	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatAnalysisAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRulePort
entryRulePort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	 iv_rulePort=rulePort 
	 { $current=$iv_rulePort.current; } 
	 EOF 
;

// Rule Port
rulePort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPortAccess().getInPortParserRuleCall_0()); 
    }
    this_InPort_0=ruleInPort
    { 
        $current = $this_InPort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortAccess().getOutPortParserRuleCall_1()); 
    }
    this_OutPort_1=ruleOutPort
    { 
        $current = $this_OutPort_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInPort
entryRuleInPort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInPortRule()); }
	 iv_ruleInPort=ruleInPort 
	 { $current=$iv_ruleInPort.current; } 
	 EOF 
;

// Rule InPort
ruleInPort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='inport' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInPortAccess().getInportKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInPortAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInPortAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInPortRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getInPortAccess().getVariableVariableCrossReference_3_0()); 
	}

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInPortAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleOutPort
entryRuleOutPort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutPortRule()); }
	 iv_ruleOutPort=ruleOutPort 
	 { $current=$iv_ruleOutPort.current; } 
	 EOF 
;

// Rule OutPort
ruleOutPort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='outport' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOutPortAccess().getOutportKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOutPortAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutPortAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutPortRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getOutPortAccess().getVariableVariableCrossReference_3_0()); 
	}

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOutPortAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='variable' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVariableKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypeVariableTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleVariableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"VariableType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='group' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getGroupKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getGroupVariableGroupEnumRuleCall_5_0()); 
	    }
		lv_group_5_0=ruleVariableGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"group",
        		lv_group_5_0, 
        		"VariableGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableAccess().getLeftSquareBracketKeyword_6_0());
    }
(
(
		lv_lowValue_7_0=RULE_INT
		{
			newLeafNode(lv_lowValue_7_0, grammarAccess.getVariableAccess().getLowValueINTTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lowValue",
        		lv_lowValue_7_0, 
        		"INT");
	    }

)
)	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVariableAccess().getCommaKeyword_6_2());
    }
(
(
		lv_highValue_9_0=RULE_INT
		{
			newLeafNode(lv_highValue_9_0, grammarAccess.getVariableAccess().getHighValueINTTerminalRuleCall_6_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"highValue",
        		lv_highValue_9_0, 
        		"INT");
	    }

)
)	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getVariableAccess().getRightSquareBracketKeyword_6_4());
    }
)?(	otherlv_11='gen' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getVariableAccess().getGenKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getVariableAccess().getGeneratorNumberGeneratorCrossReference_7_1_0()); 
	}

)
))?	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getVariableAccess().getSemicolonKeyword_8());
    }
)
;







// Rule Objective
ruleObjective returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='COMPARATIVE' 
	{
        $current = grammarAccess.getObjectiveAccess().getCOMPARATIVEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getObjectiveAccess().getCOMPARATIVEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='SCREENING' 
	{
        $current = grammarAccess.getObjectiveAccess().getSCREENINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getObjectiveAccess().getSCREENINGEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='RESPSURFACE' 
	{
        $current = grammarAccess.getObjectiveAccess().getRESPSURFACEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getObjectiveAccess().getRESPSURFACEEnumLiteralDeclaration_2()); 
    }
));



// Rule SimModelType
ruleSimModelType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='STATIC' 
	{
        $current = grammarAccess.getSimModelTypeAccess().getSTATICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSimModelTypeAccess().getSTATICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='CONTINUOUS' 
	{
        $current = grammarAccess.getSimModelTypeAccess().getCONTINUOUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSimModelTypeAccess().getCONTINUOUSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='DISCRETEEVENT' 
	{
        $current = grammarAccess.getSimModelTypeAccess().getDISCRETEEVENTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSimModelTypeAccess().getDISCRETEEVENTEnumLiteralDeclaration_2()); 
    }
));



// Rule VariableGroup
ruleVariableGroup returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='FACTOR' 
	{
        $current = grammarAccess.getVariableGroupAccess().getFACTOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVariableGroupAccess().getFACTOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='RESPONSE' 
	{
        $current = grammarAccess.getVariableGroupAccess().getRESPONSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVariableGroupAccess().getRESPONSEEnumLiteralDeclaration_1()); 
    }
));



// Rule VariableType
ruleVariableType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='BOOLEAN' 
	{
        $current = grammarAccess.getVariableTypeAccess().getBOOLEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVariableTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='INTEGER' 
	{
        $current = grammarAccess.getVariableTypeAccess().getINTEGEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVariableTypeAccess().getINTEGEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='FLOAT' 
	{
        $current = grammarAccess.getVariableTypeAccess().getFLOATEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getVariableTypeAccess().getFLOATEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='STRING' 
	{
        $current = grammarAccess.getVariableTypeAccess().getSTRINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getVariableTypeAccess().getSTRINGEnumLiteralDeclaration_3()); 
    }
));



// Rule SamplingMethod
ruleSamplingMethod returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='RANDOMIZED' 
	{
        $current = grammarAccess.getSamplingMethodAccess().getRANDOMIZEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSamplingMethodAccess().getRANDOMIZEDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='RANDOMIZEDBLOCK' 
	{
        $current = grammarAccess.getSamplingMethodAccess().getRANDOMIZEDBLOCKEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSamplingMethodAccess().getRANDOMIZEDBLOCKEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='FACTORIAL' 
	{
        $current = grammarAccess.getSamplingMethodAccess().getFACTORIALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSamplingMethodAccess().getFACTORIALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='FRACFACTORIAL' 
	{
        $current = grammarAccess.getSamplingMethodAccess().getFRACFACTORIALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getSamplingMethodAccess().getFRACFACTORIALEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='CENTRALCOMP' 
	{
        $current = grammarAccess.getSamplingMethodAccess().getCENTRALCOMPEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getSamplingMethodAccess().getCENTRALCOMPEnumLiteralDeclaration_4()); 
    }
));





// Rule VisualizationType
ruleVisualizationType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='HISTOGRAM' 
	{
        $current = grammarAccess.getVisualizationTypeAccess().getHISTOGRAMEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVisualizationTypeAccess().getHISTOGRAMEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='SCATTERPLOT' 
	{
        $current = grammarAccess.getVisualizationTypeAccess().getSCATTERPLOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVisualizationTypeAccess().getSCATTERPLOTEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


