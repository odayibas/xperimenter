/*
* generated by Xtext
*/
package tr.edu.metu.ceng.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import tr.edu.metu.ceng.services.XperimenterGrammarAccess;

public class XperimenterParser extends AbstractContentAssistParser {
	
	@Inject
	private XperimenterGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected tr.edu.metu.ceng.ui.contentassist.antlr.internal.InternalXperimenterParser createParser() {
		tr.edu.metu.ceng.ui.contentassist.antlr.internal.InternalXperimenterParser result = new tr.edu.metu.ceng.ui.contentassist.antlr.internal.InternalXperimenterParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPortAccess().getAlternatives(), "rule__Port__Alternatives");
					put(grammarAccess.getObjectiveAccess().getAlternatives(), "rule__Objective__Alternatives");
					put(grammarAccess.getSimModelTypeAccess().getAlternatives(), "rule__SimModelType__Alternatives");
					put(grammarAccess.getVariableGroupAccess().getAlternatives(), "rule__VariableGroup__Alternatives");
					put(grammarAccess.getVariableTypeAccess().getAlternatives(), "rule__VariableType__Alternatives");
					put(grammarAccess.getSamplingMethodAccess().getAlternatives(), "rule__SamplingMethod__Alternatives");
					put(grammarAccess.getStatAnalysisTypeAccess().getAlternatives(), "rule__StatAnalysisType__Alternatives");
					put(grammarAccess.getVisualizationTypeAccess().getAlternatives(), "rule__VisualizationType__Alternatives");
					put(grammarAccess.getExperimentAccess().getGroup(), "rule__Experiment__Group__0");
					put(grammarAccess.getExperimentAccess().getGroup_3(), "rule__Experiment__Group_3__0");
					put(grammarAccess.getExperimentAccess().getGroup_19(), "rule__Experiment__Group_19__0");
					put(grammarAccess.getDesignAccess().getGroup(), "rule__Design__Group__0");
					put(grammarAccess.getSimulationAccess().getGroup(), "rule__Simulation__Group__0");
					put(grammarAccess.getSimulationAccess().getGroup_6(), "rule__Simulation__Group_6__0");
					put(grammarAccess.getStatAnalysisAccess().getGroup(), "rule__StatAnalysis__Group__0");
					put(grammarAccess.getInPortAccess().getGroup(), "rule__InPort__Group__0");
					put(grammarAccess.getOutPortAccess().getGroup(), "rule__OutPort__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_6(), "rule__Variable__Group_6__0");
					put(grammarAccess.getVariableAccess().getGroup_7(), "rule__Variable__Group_7__0");
					put(grammarAccess.getNumberGeneratorAccess().getGroup(), "rule__NumberGenerator__Group__0");
					put(grammarAccess.getNumberGeneratorAccess().getGroup_6(), "rule__NumberGenerator__Group_6__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getExperimentAccess().getNameAssignment_1(), "rule__Experiment__NameAssignment_1");
					put(grammarAccess.getExperimentAccess().getDescriptionAssignment_3_1(), "rule__Experiment__DescriptionAssignment_3_1");
					put(grammarAccess.getExperimentAccess().getObjectiveAssignment_5(), "rule__Experiment__ObjectiveAssignment_5");
					put(grammarAccess.getExperimentAccess().getDesignAssignment_8(), "rule__Experiment__DesignAssignment_8");
					put(grammarAccess.getExperimentAccess().getSimulationAssignment_11(), "rule__Experiment__SimulationAssignment_11");
					put(grammarAccess.getExperimentAccess().getAnalysisAssignment_14(), "rule__Experiment__AnalysisAssignment_14");
					put(grammarAccess.getExperimentAccess().getVisualizationAssignment_17(), "rule__Experiment__VisualizationAssignment_17");
					put(grammarAccess.getExperimentAccess().getTimeoutAssignment_19_1(), "rule__Experiment__TimeoutAssignment_19_1");
					put(grammarAccess.getDesignAccess().getNameAssignment_1(), "rule__Design__NameAssignment_1");
					put(grammarAccess.getDesignAccess().getMethodAssignment_4(), "rule__Design__MethodAssignment_4");
					put(grammarAccess.getDesignAccess().getVariablesAssignment_7(), "rule__Design__VariablesAssignment_7");
					put(grammarAccess.getSimulationAccess().getNameAssignment_1(), "rule__Simulation__NameAssignment_1");
					put(grammarAccess.getSimulationAccess().getModelFilePathAssignment_4(), "rule__Simulation__ModelFilePathAssignment_4");
					put(grammarAccess.getSimulationAccess().getModelTypeAssignment_6_1(), "rule__Simulation__ModelTypeAssignment_6_1");
					put(grammarAccess.getSimulationAccess().getPortsAssignment_7(), "rule__Simulation__PortsAssignment_7");
					put(grammarAccess.getStatAnalysisAccess().getNameAssignment_1(), "rule__StatAnalysis__NameAssignment_1");
					put(grammarAccess.getStatAnalysisAccess().getUriAssignment_4(), "rule__StatAnalysis__UriAssignment_4");
					put(grammarAccess.getInPortAccess().getNameAssignment_1(), "rule__InPort__NameAssignment_1");
					put(grammarAccess.getInPortAccess().getVariableAssignment_3(), "rule__InPort__VariableAssignment_3");
					put(grammarAccess.getOutPortAccess().getNameAssignment_1(), "rule__OutPort__NameAssignment_1");
					put(grammarAccess.getOutPortAccess().getVariableAssignment_3(), "rule__OutPort__VariableAssignment_3");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getTypeAssignment_3(), "rule__Variable__TypeAssignment_3");
					put(grammarAccess.getVariableAccess().getGroupAssignment_5(), "rule__Variable__GroupAssignment_5");
					put(grammarAccess.getVariableAccess().getLowValueAssignment_6_1(), "rule__Variable__LowValueAssignment_6_1");
					put(grammarAccess.getVariableAccess().getHighValueAssignment_6_3(), "rule__Variable__HighValueAssignment_6_3");
					put(grammarAccess.getVariableAccess().getGeneratorAssignment_7_1(), "rule__Variable__GeneratorAssignment_7_1");
					put(grammarAccess.getNumberGeneratorAccess().getNameAssignment_1(), "rule__NumberGenerator__NameAssignment_1");
					put(grammarAccess.getNumberGeneratorAccess().getUriAssignment_4(), "rule__NumberGenerator__UriAssignment_4");
					put(grammarAccess.getNumberGeneratorAccess().getSeedAssignment_6_1(), "rule__NumberGenerator__SeedAssignment_6_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			tr.edu.metu.ceng.ui.contentassist.antlr.internal.InternalXperimenterParser typedParser = (tr.edu.metu.ceng.ui.contentassist.antlr.internal.InternalXperimenterParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XperimenterGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XperimenterGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
